// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: getFeedFollow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getFeedFollow = `-- name: GetFeedFollow :many
SELECT feed_follow.id, feed_follow.created_at, feed_follow.updated_at, users.name AS user_name, feeds.name AS feed_name
FROM feed_follow
INNER JOIN users ON feed_follow.user_id = users.id
INNER JOIN feeds ON feed_follow.feed_id = feeds.id
WHERE feed_follow.user_id = $1
`

type GetFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	FeedName  string
}

func (q *Queries) GetFeedFollow(ctx context.Context, userID uuid.NullUUID) ([]GetFeedFollowRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollow, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowRow
	for rows.Next() {
		var i GetFeedFollowRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
